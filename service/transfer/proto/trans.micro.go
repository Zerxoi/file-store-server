// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: trans.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TransferService service

type TransferService interface {
	// 文件转移
	Transfer(ctx context.Context, in *ReqTrans, opts ...client.CallOption) (*RespTrans, error)
}

type transferService struct {
	c    client.Client
	name string
}

func NewTransferService(name string, c client.Client) TransferService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &transferService{
		c:    c,
		name: name,
	}
}

func (c *transferService) Transfer(ctx context.Context, in *ReqTrans, opts ...client.CallOption) (*RespTrans, error) {
	req := c.c.NewRequest(c.name, "TransferService.Transfer", in)
	out := new(RespTrans)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransferService service

type TransferServiceHandler interface {
	// 文件转移
	Transfer(context.Context, *ReqTrans, *RespTrans) error
}

func RegisterTransferServiceHandler(s server.Server, hdlr TransferServiceHandler, opts ...server.HandlerOption) error {
	type transferService interface {
		Transfer(ctx context.Context, in *ReqTrans, out *RespTrans) error
	}
	type TransferService struct {
		transferService
	}
	h := &transferServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TransferService{h}, opts...))
}

type transferServiceHandler struct {
	TransferServiceHandler
}

func (h *transferServiceHandler) Transfer(ctx context.Context, in *ReqTrans, out *RespTrans) error {
	return h.TransferServiceHandler.Transfer(ctx, in, out)
}
