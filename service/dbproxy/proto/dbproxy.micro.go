// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dbproxy.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DBProxyService service

type DBProxyService interface {
	// tbl_file
	UploadFile(ctx context.Context, in *ReqUploadFile, opts ...client.CallOption) (*RespUploadFile, error)
	FileMeta(ctx context.Context, in *ReqFileMeta, opts ...client.CallOption) (*RespFileMeta, error)
	UpdateFileLocation(ctx context.Context, in *ReqUpdateFileLocation, opts ...client.CallOption) (*RespUpdateFileLocation, error)
	// tbl_user_file
	UploadUserFile(ctx context.Context, in *ReqUploadUserFile, opts ...client.CallOption) (*RespUploadUserFile, error)
	QueryUserFile(ctx context.Context, in *ReqQueryUserFile, opts ...client.CallOption) (*RespQueryUserFile, error)
	// tbl_user
	SignupUser(ctx context.Context, in *ReqSignupUser, opts ...client.CallOption) (*RespSignupUser, error)
	SigninUser(ctx context.Context, in *ReqSigninUser, opts ...client.CallOption) (*RespSigninUser, error)
	UserInfo(ctx context.Context, in *ReqUserInfo, opts ...client.CallOption) (*RespUserInfo, error)
	// tbl_token
	Token(ctx context.Context, in *ReqToken, opts ...client.CallOption) (*RespToken, error)
	UpdateToken(ctx context.Context, in *ReqUpdateToken, opts ...client.CallOption) (*RespUpdateToken, error)
}

type dBProxyService struct {
	c    client.Client
	name string
}

func NewDBProxyService(name string, c client.Client) DBProxyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &dBProxyService{
		c:    c,
		name: name,
	}
}

func (c *dBProxyService) UploadFile(ctx context.Context, in *ReqUploadFile, opts ...client.CallOption) (*RespUploadFile, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.UploadFile", in)
	out := new(RespUploadFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) FileMeta(ctx context.Context, in *ReqFileMeta, opts ...client.CallOption) (*RespFileMeta, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.FileMeta", in)
	out := new(RespFileMeta)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) UpdateFileLocation(ctx context.Context, in *ReqUpdateFileLocation, opts ...client.CallOption) (*RespUpdateFileLocation, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.UpdateFileLocation", in)
	out := new(RespUpdateFileLocation)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) UploadUserFile(ctx context.Context, in *ReqUploadUserFile, opts ...client.CallOption) (*RespUploadUserFile, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.UploadUserFile", in)
	out := new(RespUploadUserFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) QueryUserFile(ctx context.Context, in *ReqQueryUserFile, opts ...client.CallOption) (*RespQueryUserFile, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.QueryUserFile", in)
	out := new(RespQueryUserFile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) SignupUser(ctx context.Context, in *ReqSignupUser, opts ...client.CallOption) (*RespSignupUser, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.SignupUser", in)
	out := new(RespSignupUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) SigninUser(ctx context.Context, in *ReqSigninUser, opts ...client.CallOption) (*RespSigninUser, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.SigninUser", in)
	out := new(RespSigninUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) UserInfo(ctx context.Context, in *ReqUserInfo, opts ...client.CallOption) (*RespUserInfo, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.UserInfo", in)
	out := new(RespUserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) Token(ctx context.Context, in *ReqToken, opts ...client.CallOption) (*RespToken, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.Token", in)
	out := new(RespToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyService) UpdateToken(ctx context.Context, in *ReqUpdateToken, opts ...client.CallOption) (*RespUpdateToken, error) {
	req := c.c.NewRequest(c.name, "DBProxyService.UpdateToken", in)
	out := new(RespUpdateToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBProxyService service

type DBProxyServiceHandler interface {
	// tbl_file
	UploadFile(context.Context, *ReqUploadFile, *RespUploadFile) error
	FileMeta(context.Context, *ReqFileMeta, *RespFileMeta) error
	UpdateFileLocation(context.Context, *ReqUpdateFileLocation, *RespUpdateFileLocation) error
	// tbl_user_file
	UploadUserFile(context.Context, *ReqUploadUserFile, *RespUploadUserFile) error
	QueryUserFile(context.Context, *ReqQueryUserFile, *RespQueryUserFile) error
	// tbl_user
	SignupUser(context.Context, *ReqSignupUser, *RespSignupUser) error
	SigninUser(context.Context, *ReqSigninUser, *RespSigninUser) error
	UserInfo(context.Context, *ReqUserInfo, *RespUserInfo) error
	// tbl_token
	Token(context.Context, *ReqToken, *RespToken) error
	UpdateToken(context.Context, *ReqUpdateToken, *RespUpdateToken) error
}

func RegisterDBProxyServiceHandler(s server.Server, hdlr DBProxyServiceHandler, opts ...server.HandlerOption) error {
	type dBProxyService interface {
		UploadFile(ctx context.Context, in *ReqUploadFile, out *RespUploadFile) error
		FileMeta(ctx context.Context, in *ReqFileMeta, out *RespFileMeta) error
		UpdateFileLocation(ctx context.Context, in *ReqUpdateFileLocation, out *RespUpdateFileLocation) error
		UploadUserFile(ctx context.Context, in *ReqUploadUserFile, out *RespUploadUserFile) error
		QueryUserFile(ctx context.Context, in *ReqQueryUserFile, out *RespQueryUserFile) error
		SignupUser(ctx context.Context, in *ReqSignupUser, out *RespSignupUser) error
		SigninUser(ctx context.Context, in *ReqSigninUser, out *RespSigninUser) error
		UserInfo(ctx context.Context, in *ReqUserInfo, out *RespUserInfo) error
		Token(ctx context.Context, in *ReqToken, out *RespToken) error
		UpdateToken(ctx context.Context, in *ReqUpdateToken, out *RespUpdateToken) error
	}
	type DBProxyService struct {
		dBProxyService
	}
	h := &dBProxyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DBProxyService{h}, opts...))
}

type dBProxyServiceHandler struct {
	DBProxyServiceHandler
}

func (h *dBProxyServiceHandler) UploadFile(ctx context.Context, in *ReqUploadFile, out *RespUploadFile) error {
	return h.DBProxyServiceHandler.UploadFile(ctx, in, out)
}

func (h *dBProxyServiceHandler) FileMeta(ctx context.Context, in *ReqFileMeta, out *RespFileMeta) error {
	return h.DBProxyServiceHandler.FileMeta(ctx, in, out)
}

func (h *dBProxyServiceHandler) UpdateFileLocation(ctx context.Context, in *ReqUpdateFileLocation, out *RespUpdateFileLocation) error {
	return h.DBProxyServiceHandler.UpdateFileLocation(ctx, in, out)
}

func (h *dBProxyServiceHandler) UploadUserFile(ctx context.Context, in *ReqUploadUserFile, out *RespUploadUserFile) error {
	return h.DBProxyServiceHandler.UploadUserFile(ctx, in, out)
}

func (h *dBProxyServiceHandler) QueryUserFile(ctx context.Context, in *ReqQueryUserFile, out *RespQueryUserFile) error {
	return h.DBProxyServiceHandler.QueryUserFile(ctx, in, out)
}

func (h *dBProxyServiceHandler) SignupUser(ctx context.Context, in *ReqSignupUser, out *RespSignupUser) error {
	return h.DBProxyServiceHandler.SignupUser(ctx, in, out)
}

func (h *dBProxyServiceHandler) SigninUser(ctx context.Context, in *ReqSigninUser, out *RespSigninUser) error {
	return h.DBProxyServiceHandler.SigninUser(ctx, in, out)
}

func (h *dBProxyServiceHandler) UserInfo(ctx context.Context, in *ReqUserInfo, out *RespUserInfo) error {
	return h.DBProxyServiceHandler.UserInfo(ctx, in, out)
}

func (h *dBProxyServiceHandler) Token(ctx context.Context, in *ReqToken, out *RespToken) error {
	return h.DBProxyServiceHandler.Token(ctx, in, out)
}

func (h *dBProxyServiceHandler) UpdateToken(ctx context.Context, in *ReqUpdateToken, out *RespUpdateToken) error {
	return h.DBProxyServiceHandler.UpdateToken(ctx, in, out)
}
